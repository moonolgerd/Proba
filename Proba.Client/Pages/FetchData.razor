@page "/fetchdata"
@using Google.Protobuf.WellKnownTypes;
@using System.Linq.Expressions;
@inject ProbaServer.ProbaServerClient ProbaServerClient
@inject IModalService Modal

<h1>Sortable HTML table</h1>
@if (data != null)
{
    <table class="table">
        <thead>
            <tr>
                <th class="header" @onclick="@(() => Click(p => p.Greeting))">
                    Greeting
                    <span class="@GetSortStyle("Greeting")"></span>
                </th>
                <th class="header" @onclick="@(() => Click(p => p.Count))">
                    Age
                    <span class="@GetSortStyle("Count")"></span>
                </th>
                <th class="header" @onclick="@(() => Click(p => p.Date))">
                    Date
                    <span class="@GetSortStyle("Date")"></span>
                </th>
                <th class="header" @onclick="@(() => Click(p => p.Value))">
                    Percentage
                    <span class="@GetSortStyle("Value")"></span>
                </th>
            </tr>
        </thead>
        @foreach (var item in data)
        {
            <tbody>
                <tr>
                    <td>@item.Greeting</td>
                    <td>@item.Count</td>
                    <td>@item.Date.ToDateTime()</td>
                    <td>@item.Value</td>
                    <td><span class="oi oi-circle-x" @onclick="@(() => Remove(@item))"></span></td>
                </tr>
            </tbody>
        }
    </table>

    if (isAdd)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add Proba</h3>
                        <button type="button" class="close" @onclick="Close">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="greeting">Proba Name</label>
                                <input @bind="Proba.Greeting" type="text" id="greeting" class="form-control" placeholder="Enter a greeting" />
                            </div>

                            <div class="form-group">
                                <label for="year">Proba Count</label>
                                <input @bind="Proba.Count" type="text" id="year" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label for="number">Proba Value</label>
                                <input @bind="Proba.Value" id="number" type="number" class="form-control" />
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-block btn-info" @onclick="Save" data-dismiss="modal">Save</button>
                        <button @onclick="Close" class="btn btn-secondary">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

<input type="button" title="Add" @onclick="@Add" value="Add a Greeting" />

@functions {
    bool isAdd { get; set; }
    IEnumerable<ProbaMessage> data { get; set; }
    private readonly List<ProbaMessage> list = new List<ProbaMessage>();
    private bool isSortedAscending;
    private string currentSortColumn;
    ProbaMessage Proba { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetData();

        Proba = new ProbaMessage();
        //await channel.ShutdownAsync();
    }

    private async Task GetData()
    {
        list.Clear();
        using (var reply = ProbaServerClient.GetProbas(new ProbaRequest()))
        {
            while (await reply.ResponseStream.MoveNext())
            {
                var current = reply.ResponseStream.Current;
                foreach (var item in current.Messages)
                {
                    list.Add(item);
                }
            }
        }
        data = list;
    }

    private async Task Remove(ProbaMessage probaMessage)
    {
        await ProbaServerClient.DeleteProbaAsync(probaMessage);
        list.Remove(probaMessage);
        await GetData();
    }

    private void Add()
    {
        this.isAdd = true;
        //Modal.Show("Add a Proba", typeof(AddProba));
        //Modal.OnClose += async (ModalResult result) => await GetData();
    }

    public void Close()
    {
        this.isAdd = false;
    }

    async Task Save()
    {
        await ProbaServerClient.AddProbaAsync(Proba);
        this.isAdd = false;
        await GetData();
    }

    private void Click(Expression<Func<ProbaMessage, object>> expression)
    {
        if (expression.Body is UnaryExpression unaryExpression)
            GetCurrentSortColumn(unaryExpression.Operand);
        else 
            GetCurrentSortColumn(expression.Body);
        
        var func = expression.Compile();

        data = isSortedAscending ? data.OrderBy(func) : data.OrderByDescending(func);
        
        isSortedAscending = !isSortedAscending;

        void GetCurrentSortColumn(Expression ex)
        {
            if (ex is MemberExpression memberExpression)
            {
                currentSortColumn = memberExpression.Member.Name;
            }
        }
    }

    private string GetSortStyle(string columnName) => currentSortColumn != columnName ? string.Empty : $"oi oi-caret-{(isSortedAscending ? "top" : "bottom")}";
}
