@page "/fetchdata"
@using Google.Protobuf.WellKnownTypes;
@inject ProbaServer.ProbaServerClient ProbaServerClient

<h1>Sortable HTML table</h1>

@if (data != null)
{
    <table class="table">
        <thead>
            <tr>
                <th class="header" @onclick="@(() => Click("Greeting"))">
                    Greeting
                    <span class="@SortHelper.ClassForColumn("Greeting")"></span>
                </th>
                <th class="header" @onclick="@(() => Click("Age"))">
                    Age
                    <span class="@SortHelper.ClassForColumn("Age")"></span>
                </th>
                <th class="header" @onclick="@(() => Click("Date"))">
                    Date
                    <span class="@SortHelper.ClassForColumn("Date")"></span>
                </th>
                <th class="header" @onclick="@(() => Click("Percentage"))">
                    Percentage
                    <span class="@SortHelper.ClassForColumn("Percentage")"></span>
                </th>
            </tr>
        </thead>
        @foreach (var item in data)
        {
            <tbody>
                <tr>
                    <td>@item.Greeting</td>
                    <td>@item.Count</td>
                    <td>@item.Date.ToDateTime()</td>
                    <td>@item.Value</td>
                    <td><span class="oi oi-circle-x" @onclick="@(() => Remove(@item))"></span></td>
                </tr>
            </tbody>
        }
    </table>
}
<input type="button" title="Add" @onclick="@Add" value="Add a Greeting" />

@functions {
        List<ProbaMessage> data = new List<ProbaMessage>();
        bool?[] sortIndices;
        string bottom;

    protected override async Task OnInitAsync()
    {

        using (var reply = ProbaServerClient.SayHello(new ProbaRequest()))
        {
            while (await reply.ResponseStream.MoveNext())
            {
                var current = reply.ResponseStream.Current;
                foreach (var item in current.Messages)
                {
                    data.Add(item);
                }
            }
        }
        sortIndices = SortHelper.Indices;

        //await channel.ShutdownAsync();
    }

    public void Remove(ProbaMessage probaMessage)
    {
        data.Remove(probaMessage);
    }

    public async Task Add()
    {
        var message = new ProbaMessage
        {
            Count = 5,
            Greeting = "Salut",
            Date = Timestamp.FromDateTimeOffset(DateTime.Now.ToUniversalTime()),
            Value = 12f
        };
        await ProbaServerClient.AddProbaAsync(message);
    }

    public void Click(string columnName)
    {
        Func<ProbaMessage, object> func;

        switch (columnName)
        {
            case "Greeting":
                func = (item) => item.Greeting;
                break;
            case "Age":
                func = (item) => item.Count;
                break;
            case "Date":
                func = (item) => item.Date;
                break;
            case "Percentage":
            default:
                func = (item) => item.Value;
                break;
        }

        if (!SortHelper.Indices[SortHelper.IndexForColumn(columnName)].HasValue)
        {
            SortHelper.Indices[SortHelper.IndexForColumn(columnName)] = false;
        }
        else if (!SortHelper.Indices[SortHelper.IndexForColumn(columnName)].GetValueOrDefault())
        {
            data.OrderBy(func);
            SortHelper.Indices[SortHelper.IndexForColumn(columnName)] = true;
        }
        else
        {
            data.OrderByDescending(func);
            SortHelper.Indices[SortHelper.IndexForColumn(columnName)] = null;
        }
    }

    static class SortHelper
    {
        public static bool?[] Indices { get; } = new bool?[] { null, null, null, null };

        public static string ClassForColumn(string columnName)
        {
            var index = IndexForColumn(columnName);
            var ascending = Indices[index];

            if (ascending.HasValue)
            {
                if (!ascending.Value)
                {
                    return "oi oi-caret-bottom";
                }
                else
                {
                    return "oi oi-caret-top";
                }
            }
            else
            {
                return string.Empty;
            }
        }

        public static int IndexForColumn(string columnName)
        {
            switch (columnName)
            {
                case "Greeting":
                    return 0;
                case "Age":
                    return 1;
                case "Date":
                    return 2;
                case "Percentage":
                default:
                    return 3;
            }
        }
    }
}
